##Code Snippet for Geo Fencing:

geofence_latitude = 37.7749
geofence_longitude = -122.4194
geofence_radius_meters = 100  # Radius of 100 meters
 
# Function to check if current location breaches geofence
def check_geofence(current_latitude, current_longitude):
    distance_from_center = calculate_distance(geofence_latitude, geofence_longitude, current_latitude, current_longitude)
    if distance_from_center <= geofence_radius_meters:
        return True  # Inside geofence
    else:
        return False  # Outside geofence
 
# Function to calculate distance between two GPS coordinates
def calculate_distance(lat1, lon1, lat2, lon2):
    # Haversine formula for distance calculation
    # Implementation omitted for brevity (can be implemented using libraries like geopy)
    pass
# Example usage:
current_latitude = 37.7750
current_longitude = -122.4195
If check_geofence(current_latitude, current_longitude):
    print("Inside geofence")
else:
    print("Outside geofence")
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Code Snippet for Fall Detection:

import accelerometer_library  # Example library for accelerometer data
 
# Threshold values for fall detection (sensitivity may vary)
threshold_acceleration = 9.8  # 1g (gravity) threshold
fall_duration_threshold = 1  # Fall duration threshold (in seconds)
 
# Function to detect falls based on accelerometer data
def detect_fall(acceleration_data):
    max_acceleration = max(acceleration_data)
    if max_acceleration >= threshold_acceleration:
        fall_start_time = get_current_time()
        while True:
            current_time = get_current_time()
            if max(acceleration_data) < threshold_acceleration:
                fall_end_time = current_time
                fall_duration = fall_end_time - fall_start_time
                if fall_duration >= fall_duration_threshold:
                    return True  # Fall detected
                else:
                    return False  # Not a significant fall
            acceleration_data = accelerometer_library.get_acceleration_data()
 
# Example usage:
acceleration_data = accelerometer_library.get_acceleration_data()
if detect_fall(acceleration_data):
    print("Fall detected, sending alert

